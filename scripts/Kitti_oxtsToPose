import numpy as np
from os import listdir
import pandas as pd 



def latToScale(lat):
# % compute mercator scale from latitude
    return np.cos(lat * np.pi / 180.0)

def latlonToMercator(lat,lon,scale):
# % converts lat/lon coordinates to mercator coordinates using mercator scale
    er = 6378137
    mx = scale * lon * np.pi * er / 180
    my = scale * er * np.log( np.tan((90+lat) * np.pi / 360) )

    return [mx, my]

def convertOxtsToPose(oxts):
    # % converts a list of oxts measurements into metric poses,
    # % starting at (0,0,0) meters, OXTS coordinates are defined as
    # % x = forward, y = right, z = down (see OXTS RT3000 user manual)
    # % afterwards, pose{i} contains the transformation which takes a
    # % 3D point in the i'th frame and projects it into the oxts
    # % coordinates of the first frame.

    # % compute scale from first lat value
    scale = latToScale(oxts[0][0])

    # % init pose
    pose     = np.zeros((107,3))
    Tr_0_inv = []

    # % for all oxts packets do
    for i in range(1,len(oxts)):
    
        # % if there is no data => no pose
        if not [oxts[i]]:
            pose[i] = []
            pass

        # % translation vector
        t=np.zeros((3,1))
        t[0][0], t[1][0]= latlonToMercator(oxts[i][0],oxts[i][1],scale)
        t[2][0] = oxts[i][2]

        # % rotation matrix (OXTS RT3000 user manual, page 71/92)
        rx = oxts[i][3] #% roll
        ry = oxts[i][4] #% pitch
        rz = oxts[i][5] #% heading 
        Rx = np.asarray([[1, 0, 0], [0, np.cos(rx), -np.sin(rx)], [0, np.sin(rx), np.cos(rx)]]) #% base => nav  (level oxts => rotated oxts)
        Ry = np.asarray([[np.cos(ry), 0, np.sin(ry)], [0, 1, 0,], [-np.sin(ry), 0, np.cos(ry)]]) #% base => nav  (level oxts => rotated oxts)
        Rz = np.asarray([[np.cos(rz), -np.sin(rz), 0], [np.sin(rz), np.cos(rz), 0], [0, 0, 1]]) #% base => nav  (level oxts => rotated oxts)
        R  = Rz@Ry@Rx

        joined=np.asarray([[R[0,0],R[0,1], R[0,2], t[0,0]],[R[1,0],R[1,1], R[1,2], t[1,0]],[R[2,0],R[2,1], R[2,2], t[2,0]],[0, 0, 0, 1]])
        # % normalize translation and rotation (start at 0/0/0)
        if len(Tr_0_inv)==0:
            Tr_0_inv = np.linalg.inv(joined)
        
        # % add pose
        pose[i]= Tr_0_inv*joined
    return pose 


path='./data/2011_09_26_2/2011_09_26_drive_0001_sync/oxts/data/'
filenames = [f for f in listdir(path)]
filenames.sort(key=lambda f: int(''.join(filter(str.isdigit, f))))
oxts=np.zeros((len(filenames),30))
for i in range(len(filenames)):
    oxts[i]=pd.read_csv(path+filenames[i], delimiter=' ', header=None)

pose=convertOxtsToPose(oxts)
print(pose)